#ifndef JELLOCUBE_H
#define JELLOCUBE_H

#include <ngl/Vec3.h>
#include <vector>
#include <memory>

#include <math.h>

#include "Spring.h"

class JelloCube
{
	public:
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief Constructor for GLWindow
	//----------------------------------------------------------------------------------------------------------------------
	JelloCube();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief Destructor for GLWindow
	//----------------------------------------------------------------------------------------------------------------------
	~JelloCube();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief update testing function
	//----------------------------------------------------------------------------------------------------------------------
	void update();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief get our mass points (for drawing)
	//----------------------------------------------------------------------------------------------------------------------
	inline std::vector<std::shared_ptr<ngl::Vec3>> getMassPoints(){return m_massPoints;};
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief get our springs (for drawing)
	//----------------------------------------------------------------------------------------------------------------------
	inline std::vector<Spring>* getStructuralSprings(){return &m_structuralSprings;};
	inline std::vector<Spring>* getBendSprings(){return &m_bendSprings;};
	inline std::vector<Spring>* getShearSprings(){return &m_shearSprings;};

	private:
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief build our arrays
	//----------------------------------------------------------------------------------------------------------------------
	void generate();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief array of points that make up our jello cube
	//----------------------------------------------------------------------------------------------------------------------
	std::vector<std::shared_ptr<ngl::Vec3>> m_massPoints;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief array of springs that connect our jello cube
	//----------------------------------------------------------------------------------------------------------------------
	std::vector<Spring> m_structuralSprings;
	std::vector<Spring> m_bendSprings;
	std::vector<Spring> m_shearSprings;
};

#endif // JELLOCUBE_H
